@page "/signup"

@layout AuthLayout
@inject AuthService AuthService
@inject MauiInterop Maui
@inject NavigationManager NavigationManager

<EditForm Model="_model" OnValidSubmit="SignupAsync">
    <DataAnnotationsValidator />
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center vw-90">
            <h4>Hello</h4>
            <p class="text-muted">Sign-up</p>
            <div class="vstack text-start">
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <InputText @bind-Value="_model.Name" placeholder="Enter Name" class="form-control rounded-pill fs-6" />
                    <ValidationMessage For="()=> _model.Name" />
                </div>
                <div class="mb-3">
                    <label class="form-label">UserName</label>
                    <InputText @bind-Value="_model.userName" placeholder="Enter username" class="form-control rounded-pill fs-6" />
                    <ValidationMessage For="()=> _model.userName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText @bind-Value="_model.userPassword" placeholder="Enter password" type="password" class="form-control rounded-pill fs-6" />
                    <ValidationMessage For="()=> _model.userPassword" />
                </div>
                <button type="submit" class="btn btn-primary rounded-pill mybtn">SignUp</button>
            </div>
        </div>

    </div>
</EditForm>
<p class="text-center mt-3">Already have an account? <NavLink href="/signin">SignIn</NavLink></p>

@code {
    private SignupModel _model = new();

    private async Task SignupAsync()
    {
        // show loader

        Maui.ShowLoader();
        try
        {
            await Task.Delay(5000);
            var result = await AuthService.SignupAsync(_model);
            if (result.IsSuccess)
            {
                NavigationManager.NavigateTo("/home", replace: true);
            }
            else
            {
                // show alert
                await Maui.ShowErrorAlertAsync(result.Error ?? "Something went wrong");
               
            }
        }
        catch (Exception ex)
        {
            await Maui.ShowErrorAlertAsync(ex.Message);
           

        }
        finally
        {
            Maui.HideLoader();
        }

    }

}